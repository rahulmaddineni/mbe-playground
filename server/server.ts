// server.ts
import express, { Request, Response } from "express";
import path from "path";
import https from "https";
import fs from "fs";
import axios from "axios";

const app = express();
// Replace with port used for local development, Don't forget to add https://localhost:{port}/manage redirect to Valid Oauth redirect list in FB Login app settings
const port = process.env.PORT || 3002;

// Serve static files from the React app
app.use(express.static(path.join(__dirname, "../build")));

// API
app.get("/mbe/install_info", async (req: Request, res: Response) => {
  const { fbe_external_business_id, access_token } = req.query;
  if (
    typeof fbe_external_business_id !== "string" ||
    typeof access_token !== "string"
  ) {
    return res.status(400).json({ message: "Invalid query parameters" });
  }
  try {
    const response = await axios.get(
      `https://graph.facebook.com/v13.0/fbe_business/fbe_installs`,
      {
        params: {
          fbe_external_business_id,
          access_token,
        },
      }
    );
    res.json(response.data.data);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// The "catchall" handler: for any request that doesn't
// match one above, send back React's index.html file.
app.get("*", (req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, "../build/index.html"));
});

// Start Server
const useHttps = process.argv.includes("--https");
// Only run https for localhost when arg is passed in
if (process.env.NODE_ENV !== "production" && useHttps) {
  // Generated by openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
  const sslOptions = {
    key: fs.readFileSync(path.join(__dirname, "key.pem")),
    cert: fs.readFileSync(path.join(__dirname, "cert.pem")),
  };
  https.createServer(sslOptions, app).listen(port, () => {
    console.log(`Local HTTPS Server is listening on port ${port}`);
  });
} else {
  app.listen(port, () => {
    console.log(`Server is listening on port ${port}`);
  });
}
